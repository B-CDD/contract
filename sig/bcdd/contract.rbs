module BCDD
  module Contract
    VERSION: ::String

    class Error < ::StandardError
    end

    def self.config: () -> Config

    def self.configuration: { (Config) -> void } -> Config

    def self.proxy: (always_enabled: bool) { (::Class) -> void } -> ::Class

    def self.error!: (String) -> void

    def self.assert!: (untyped, String) { (untyped) -> bool } -> untyped
    def self.refute!: (untyped, String) { (untyped) -> bool } -> untyped

    def self.assert: (untyped, String) { (untyped) -> bool } -> untyped
    def self.refute: (untyped, String) { (untyped) -> bool } -> untyped

    def self.new: (untyped) -> untyped
    def self.unit: (untyped) -> untyped
    def self.list: (untyped) -> ::Module
    def self.schema: (Hash[untyped, untyped]) -> ::Module
    def self.pairs: (Hash[untyped, untyped]) -> ::Module
    def self.to_proc: () -> ::Proc

    def self.[]: (untyped) -> ::Module
  end
end
